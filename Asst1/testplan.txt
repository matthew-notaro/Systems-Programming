//Extract token
if(isspace(currChar) != 0 || (i == len-1 && start <= len-1)) //Delimiter found or last token reached
{
  //Malloc space to hold substr from start to location of delimiter, +1 for '\0'
  char* token = (char*)malloc(i-start+1);
  int token_cnt = 0;

  if(token == NULL)
  {
    printf("Bad malloc\n");
    return;
  }

  memset(token, '\0', i-start+1);

  if(i == len-1)
  {
    for(j = start; j <= i; j++)
    {
       token[token_cnt] = file_string[j];
       token_cnt++;
    }
  }
  else
  {
    for(j = start; j < i; j++)
    {
       token[token_cnt] = file_string[j];
       token_cnt++;
    }
  }

  printf("%s\n", token);
  root = insert(token, root);
  printf("inserted\n");

  //Increments starting point for next token
  if(i+1 < len)
    start = i+1;

  //Insert delimiter token
  if(isspace(currChar) != 0)
  {
    if(currChar == ' ')
    {
      //root = insert(escape, root);
    }
    else if(currChar == '\n')
    {
      //root = insert(strcat(escape, "n"), root);
    }
    else if(currChar == '\t')
    {
      //root = insert(strcat(escape, "t"), root);
    }
  }
}
