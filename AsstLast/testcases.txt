All testcases assume the client can connect to the server and the client requests project/files/version numbers that exists/doesn't exist depending on the command.
Writing every single one would be redundant.

./WTFserver

Example directory structure before executing any commands:
.
    WTFtest.c  
    WTFserver.c
    WTFclient.c

Upon running the makefile:
.
    WTFtest.c  
    WTFserver.c
    WTFclient.c
    WTF
    WTFserver

Upon running ./WTFtest but before any client/server commands are called (not including .c files from now on):
.
    WTFtest.c  
    WTFserver.c
    WTFclient.c
    WTF
    WTFserver
    WTFtest
    Client - working directory for WTFclient
    Server - working directory for WTFserver

Configure:
    ./WTF configure <IP> <host>
.
    WTF
    WTFserver
    Client
        .configure - contains <IP> and <host>
    Server


Create:
    ./WTF create <project>
    Success:
.
    WTF
    WTFserver
    Client
        .configure
    Server
        <project>
            .Archive
            .History
            .Manifest - contains "0"



Checkout:
    Before:
.
    WTF
    WTFserver
    Client
        .configure
    Server
        <project>
            .Archive
            .History
            .Manifest
            file1
            file2
            subdir1
                file3

    ./WTF create <project>
    After:
.
    WTF
    WTFserver
    Client
				.Manifest
        <project> - ignores .* files
            file1
            file2
            subdir1
                file3
    Server
        <project>
            .Archive
            .History
            .Manifest
            file1
            file2
            subdir1
                file3


    
Update: 
    Transfer ./<project>/.Manifest to client
    Client creates appropriate .Update / .Conflict
    

Upgrade:
.Update:
A file1 hash
D file2 hash

Server:
    project
        file2
        file1
Client
    project
        file1 - pulled and overwritten from server
        file2 - deleted from .Manifest
        file3 - existed already and overwritten from server


Commit: 
    Transfer ./<project>/.Manifest to client

    Server receives clients .Commit and saves it
./Server:
    <project>
        .Commit<hash>

Destroy:
    Before:
./Server:
    <project1>
        ...
    <project2>
    <project3>

    ./WTF destroy <project1>
./Server:
    <project2>
    <project3>

Add:
		./WTF add <project> <file>
		Success:
.
		WTF
		WTFserver
		Client
				.configure
				<project>
						.Manifest - new entry
		Server
				<project>
						.Archive
						.History
						.Manifest - contains "0"



Remove:
		./WTF remove <project> <file>
		Success:
.
		WTF
		WTFserver
		Client
				.configure
				<project>
						.Manifest - entry deleted
		Server
				<project>
						.Archive
						.History
						.Manifest - contains "0"


Current Version:
    Example ./<project>/.Manifest
    7
    2 ./<project>/file1 <hash1>
    7 ./<project>/file2 <hash2>
    3 ./<project>/file3 <hash3>
    1 ./<project>/file4 <hash4>

    ./WTF currentversion <project>
    Output to client:
    2 ./<project>/file1
    7 ./<project>/file2
    3 ./<project>/file3
    1 ./<project>/file4



History: similar to update and 1st part of commit since it just transfer a single file with a known name over to the client


Rollback:
    Before:
./Server/
    <project>
        .Archive
            0.tar.gz - just contains .Man, .Ar, .His
        .Manifest
        .History
        more files...
    more projects...
    ./WTF rollback <project> 0
./Server/
    <project>
        .Archive - empty
        .Manifest - "0"
        .History - empty
    more projects...