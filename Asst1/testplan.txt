main:
Tested command-line interface's ability to read flags/file names by entering various correct and incorrect series of flags and files that may or may not exist.
/.fileCompressor -R -b test.txt(exists)         -> Correct
/.fileCompressor -b -R test.txt(exists)         -> Correct
/.fileCompressor -R -b test.txt(not exist)      -> Fatal Error: File does not exist.
/.fileCompressor -R -r test.txt                 -> Invalid flag
/.fileCompressor -b -c test.txt(not exist)      -> Invalid flag
/.fileCompressor -c test.txt HuffmanCodebook    -> Input correct book
/.fileCompressor -c HuffmanCodebook test.txt    -> Correct
/.fileCompressor -R -R test.txt                 -> Operation not specified
/.fileCompressor -c test.txt                    -> Not enough arguments
/.fileCompressor -d test.txt                    -> Not enough arguments


build:
Individually tested functions (BST: insert | Heap: heapify, delete, etc. | Huffman: encode) by manually passing in the correct parameters
    and analyzing the result with the intented result. 
Tested a variety of test text files: 
    empty: error
    delimiter-only:
    one token:


short, countable text files to compare the actual frequencies to the read frequencies:
    test.txt ex: aa a\t\naa a \ta\naaa a


compress:




decompress:
Tested bookToBST and the helper insertCode independently from the rest of decompress. These functions take a correct HuffmanCodebook file as input, parses it, 
    and inserts the code&token pairs in a Huffman Tree by creating placeholder nodes to keep the Huffman shape.
Tested the helper by inputting various code&token pairs, then printing out the resultant free inorder to compare the returned tree with the desired tree.
Tested bookToBST to printing out the read pairs to be inserted then printed the final Huffman Tree to compare it to the tree that produced the codebook.



recursive flag:
First tested recursively reading the names of all of the files in a given directory containing:
testDir
    test1.txt
    test2.txt
    testSubDir
        test3.txt
recursive build:
    /.fileCompressor -R -b testDir(exists)
with easily countable contents of the files and compared the frequencies to the intended frequencies.

recursive compress:
    Very similar process to single file compress but with multiple files.
recursive decompress:
    Very similar process to single file decompress but with multiple files.